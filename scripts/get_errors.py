#==================================================================================================
# Title          : get_errors.py
# Description    : The program gets the errors from ETL coordinator and writes it in a csv file
# Version        : 1.0
# Python version : 3.7.3
#==================================================================================================

import requests
import json
import pandas as pd
from os import listdir
from os.path import isfile, join
import os
import sys
from io import StringIO
from requests.packages import urllib3
from datetime import datetime,timedelta

# the below is used to Suppress the warning generated by request module
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

######################################################### hardcoded values #################################################################

startjid=22 # this needs to be changed accordingly (jobid)
endjid=91 # this needs to be changed accordingly (jobid)


env='ent-ie'  # this needs to be changed accordingly (environment ent or stg)
errortype='txn' # this needs to be changed accordingly (txn: for transaction , user: for users , catalog: for catalogs ,venue: for Venues)
outputdir="/Users/capgemini/scripts/{}_prod_errors_{}.csv".format(errortype,datetime.now().strftime("%Y%m%d%H%M%S")) # this needs to be changed accordingly
apikey='af14e333cf96083199cb680435c367f5cebfe96f' # this needs to be changed accordingly
secretkey='0ea309ed2c60ad5157e7221c7fa1f1198fdf2cf5' # this needs to be changed accordingly
client='finnair' # this needs to be changed accordingly (client name)

##############################################################################################################################################

def get_errors(startjid,endjid,env,errortype,outputdir,apikey,secretkey,client):
    """ This function gets the errors from ETL coordinator and writes it in a csv file """
    try:

        baseurl='https://etl-coordinator.{}.{}.local/'.format(client,env)
        urlapikey='apps/{}/'.format(apikey)
        joblist=list(range(startjid, endjid+1))

        ###### will hold list of all the internal jobs (10k SmSync) for given job/jobs ######

        errorjoblist=[]

        for main_job_id in joblist:
            url=baseurl+'api/v1/'+urlapikey+'jobs/{}/errors'.format(main_job_id)
            r = requests.get(url,verify=False, auth=('',secretkey))
            data=json.loads(r.text)
            for errorjobid in data['errors']:
                errorjoblist.append(str(main_job_id)+'/'+str(errorjobid['id']))

        if errortype =='txn':
            df=pd.DataFrame(columns=['transaction','error'])
        elif errortype =='catalog':
            df=pd.DataFrame(columns=['catalog','error'])
        else:
            df=pd.DataFrame(columns=['external_id','error'])

        for ids in errorjoblist:
            main_job_id,job=ids.split('/')
            urlerrorrecords=baseurl+'web/v1/'+urlapikey+"importer_jobs/{}/error_file".format(job)
            rerror = requests.get(urlerrorrecords,verify=False, auth=('',secretkey))
            finaldata=(rerror.text)
            tempdf=pd.read_csv(StringIO(finaldata))

            if errortype =='txn':
                #tempdf['transaction']=tempdf['transaction'].apply(lambda x: json.loads(x)['transaction_id'])
                tempdf['transaction']=tempdf['transaction'].apply(lambda x: json.loads(x))
            print('Getting Errors for Parent Job Id:{} and Child Job Id:{}'.format(main_job_id,job))

            if tempdf.shape[0] > 0 and errortype =='txn':
                df=pd.concat([df,tempdf[['transaction','error']]],ignore_index = True)
            elif errortype =='catalog':
                df=pd.concat([df,tempdf[['catalog','error']]],ignore_index = True)
            else:
                df=pd.concat([df,tempdf[['external_id','error']]],ignore_index = True)


        # writing data to error file
        df.to_csv (outputdir, index = False, header=True)

    except Exception as e:
        raise (e)


if __name__=="__main__":
    print ("=========================== Process Started: Getting Errors from ETL Coordinator ===========================")
    get_errors(startjid,endjid,env,errortype,outputdir,apikey,secretkey,client)
    print ("=========================== Process Completed: Error file generated ========================================")