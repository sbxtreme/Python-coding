#=====================================================================================================================================
# Title			 : parse_firebase_logs.py
# Description    : The program performs parsing of firebase logs to get errors and generate a readable json error file
# Author 		 : Shobhit Bhatnagar
# Date           : 2020-09-22
# Version        : 1.0
# Python version : 3.7.3
#=====================================================================================================================================

import os
import sys
import json
import yaml
import warnings
import pandas as pd


infilename=sys.argv[1]

# The below is used for ignoring the warnings generated by yaml loader
def warn(*args, **kwargs):
    pass
warnings.warn = warn

############################## Hard codings ##############################
outfilename="intermediate_file.txt"
final_file="firebase_errors_output.csv"
pattern1="[info] Encountered problems while importing accounts. Details:"
pattern2="[info]"
###########################################################################


def parser_func(infilename,outfilename,final_file,pattern1,pattern2):
	try:
		""" This function performs parsing of log files """

		with open(infilename) as infile, open(outfilename, 'w') as outfile:
			copy = False
			for line in infile:

				if line.strip() == pattern1:
					copy = True
					continue
				elif line.strip() == pattern2:
					copy = False
					continue
				elif copy:
					outfile.write(line)

		with open(outfilename, 'r') as infile1:
			data = infile1.read()
			data = data.replace("[info] ", "").replace("\\n", "").replace("\\", "").replace('"account":"{', "").replace(' []}"', '""').\
				   replace("[","").replace("]",",")

			data='['+' '.join(data.split())+']'

		yml_valid_data = yaml.load(data)
		json_valid_data = json.dumps(yml_valid_data,indent=4)

		df = pd.DataFrame(json.loads(json_valid_data))
		df.to_csv(final_file,index=False)
		
		# deleting intermediate file and only keeping the final file
		os.remove(outfilename)

	except Exception as e:
		print(e)
		raise e


def main():
	try:
		""" Program execution starts from here """
		parser_func(infilename,outfilename,final_file,pattern1,pattern2)

	except Exception as e:
		print(e)
		raise e


if __name__=="__main__":
	main()
	print("Log File Parser Completed!!")


